<script>
document.addEventListener('DOMContentLoaded', () => {
    const chatIcon = document.getElementById('chatIcon');
    const chatbotContainer = document.getElementById('chatbotContainer');
    const closeButton = document.getElementById('closeButton');
    const chatbotMessages = document.getElementById('chatbotMessages');
    const userInput = document.getElementById('userInput');
    const sendButton = document.getElementById('sendButton');

    const modal = document.getElementById('historyModal');
    const closeModal = document.getElementById('closeModal');
    const leftArrow = document.getElementById('leftArrow');
    const rightArrow = document.getElementById('rightArrow');

    closeModal.addEventListener('click', () => {
        modal.classList.add('hidden');
        modal.classList.remove('flex');
    });

    leftArrow.addEventListener('click', () => {
        // Implement left navigation logic
    });

    rightArrow.addEventListener('click', () => {
        // Implement right navigation logic
    });

    // Example: Open modal on button click
    // const openHistoryModalButton = document.getElementById('openHistoryModalButton');
    // openHistoryModalButton.addEventListener('click', openHistoryModal);

    let isOpen = false;
    let isLoading = false;
    let messages = [];

    function makeLoadingSpinner() {
        const spinner = document.createElement('div');
        spinner.innerHTML = `
        <div class="grid grid-cols-[40px_auto] gap-4 items-center w-full">
        <div class="grid min-h-[20px] w-full place-items-center overflow-x-scroll rounded-lg p-6 lg:overflow-visible">
        <svg class="text-gray-300 animate-spin" viewBox="0 0 64 64" fill="none" xmlns="http://www.w3.org/2000/svg"
            width="24" height="24">
            <path
            d="M32 3C35.8083 3 39.5794 3.75011 43.0978 5.20749C46.6163 6.66488 49.8132 8.80101 52.5061 11.4939C55.199 14.1868 57.3351 17.3837 58.7925 20.9022C60.2499 24.4206 61 28.1917 61 32C61 35.8083 60.2499 39.5794 58.7925 43.0978C57.3351 46.6163 55.199 49.8132 52.5061 52.5061C49.8132 55.199 46.6163 57.3351 43.0978 58.7925C39.5794 60.2499 35.8083 61 32 61C28.1917 61 24.4206 60.2499 20.9022 58.7925C17.3837 57.3351 14.1868 55.199 11.4939 52.5061C8.801 49.8132 6.66487 46.6163 5.20749 43.0978C3.7501 39.5794 3 35.8083 3 32C3 28.1917 3.75011 24.4206 5.2075 20.9022C6.66489 17.3837 8.80101 14.1868 11.4939 11.4939C14.1868 8.80099 17.3838 6.66487 20.9022 5.20749C24.4206 3.7501 28.1917 3 32 3L32 3Z"
            stroke="currentColor" stroke-width="5" stroke-linecap="round" stroke-linejoin="round"></path>
            <path
            d="M32 3C36.5778 3 41.0906 4.08374 45.1692 6.16256C49.2477 8.24138 52.7762 11.2562 55.466 14.9605C58.1558 18.6647 59.9304 22.9531 60.6448 27.4748C61.3591 31.9965 60.9928 36.6232 59.5759 40.9762"
            stroke="currentColor" stroke-width="5" stroke-linecap="round" stroke-linejoin="round" class="text-gray-900">
            </path>
        </svg>
        </div>
        <span class="thinking-pulse">Thinking...</span>
        </div>`.trim();
    return spinner.firstElementChild;
    }

    function toggleChat() {
        isOpen = !isOpen;
        chatbotContainer.classList.toggle('hidden', !isOpen);
    }

    function addMessage(text, sender) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `mb-2 p-2 rounded ${sender === 'bot' ? 'bg-blue-100 self-start' : 'bg-green-100 self-end'}`;
        messageDiv.textContent = text;
        chatbotMessages.appendChild(messageDiv);
        chatbotMessages.scrollTop = chatbotMessages.scrollHeight;
    }

    function showLoadingIndicator() {
        const spinner = makeLoadingSpinner();
        const loadingDiv = document.createElement('div');
        loadingDiv.id = 'loadingIndicator';
        loadingDiv.appendChild(spinner);
        chatbotMessages.appendChild(loadingDiv);
    }

    function hideLoadingIndicator() {
        const loadingDiv = document.getElementById('loadingIndicator');
        if (loadingDiv) {
            loadingDiv.remove();
        }
    }

    async function sendMessage() {
        if (userInput.value.trim() === '' || isLoading) return;

        const userMessage = userInput.value;
        addMessage(userMessage, 'user');
        userInput.value = '';
        isLoading = true;
        showLoadingIndicator();
        let selectedElement = document.getElementById("selectedElementContent");
        let selectedElementInnerHtml = selectedElement.innerHTML.replace('selected-element', ''); //remove this class so the LLM doesn't save it after it's used.

        try {
            const response = await fetch('/llama_bot/message.json', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ 
                    message: userMessage, 
                    context: '<%=@view_path%>', 
                    selectedElement: selectedElementInnerHtml, 
                    webPageId: '<%=@page&.id%>'
                })
            });
            const data = await response.json();

            // Only reload the window if we got a page replacement
            // in the return
            const dtIndex = data?.response?.indexOf("<!DOCTYPE") ?? -1;
            if (dtIndex >= 0 && dtIndex < 50) {
                window.location.reload();
            }
            addMessage(data.response, 'bot');
        } catch (error) {
            console.error('Error sending message to ChatGPT:', error);
        } finally {
            isLoading = false;
            hideLoadingIndicator();
        }
    }

    chatIcon.addEventListener('click', toggleChat);
    closeButton.addEventListener('click', toggleChat);
    sendButton.addEventListener('click', sendMessage);
    userInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') sendMessage();
    });

    function loadChatHistory() {
        let webPageId = '<%=@page&.id%>';
        if (webPageId) {
            //TODO: fetch Chat History from /web_page_histories IF this web_page_id is present in the URL
            fetch(`/pages/${webPageId}/histories.json`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    web_page_histories = data.web_page_histories;
                    web_page_histories.forEach(history => {
                        addWebPageHistoryToHistoryDrawer(history);
                    });
                });
        }
    }

    /**
     * Add entry to web page history to the history drawer.
     * @param {object} webPageHistory - The web page history to add.
     */
    function addWebPageHistoryToHistoryDrawer(webPageHistory) {
        const historyDrawer = document.getElementById('historyDrawer');
        const historyItem = document.createElement('div');
        historyItem.className = 'history-item cursor-pointer hover:bg-gray-100 p-2'; 
        prompt = webPageHistory.prompt || webPageHistory.user_message;
        historyItem.textContent = summarizePrompt(prompt);
        historyItem.onclick = function() {
            const modal = document.getElementById('historyModal'); // Get modal element
            const mainIframe = document.getElementById('mainIframe');
            mainIframe.innerHTML = atob(webPageHistory.content);
            document.getElementById('userPrompt').innerHTML = webPageHistory.user_message;
            modal.classList.remove('hidden');
            modal.classList.add('flex');
            document.getElementById('restoreButton').setAttribute('llama-data-web-page-history-id', webPageHistory.id);
        };
        historyDrawer.appendChild(historyItem);
    }

    document.getElementById('restoreButton').addEventListener('click', function() {
        console.log('restoreButton clicked');
        // we need to do a POST with the webPageHistory.id to /pages/restore
        let webPageId = '<%=@page&.id%>';
        //QUESTION: how do I get this webpagehistory id?
        // we save it to the restoreButton so that when the user clicks on the history item.. we have the ID.
        
        const webPageHistoryId = document.getElementById('restoreButton').getAttribute('llama-data-web-page-history-id');

        fetch(`/pages/${webPageId}/restore.json?page_history_id=${webPageHistoryId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                web_page_history_id: webPageHistoryId
            })
        }).then(response => {
            if (response.ok) {
                return response.json();
            } else {
                throw new Error('Couldn\'t restore');
            }
        }).then(data => {
            alert('Web page restored');
            console.log('Web page restored:', data);
            location.reload();
        });
    });

    /**
     * Return Summary of Prompt so user understand chat history better.
     * @param {string} prompt - The original prompt from the user.
     * @returns {string} - A summary of the prompt.
     */
    function summarizePrompt(prompt){
        //if null, return empty string
        if (prompt == null) {
            return "";
        }
        // Split the text into sentences
        const sentences = prompt.split('.');
        
        // Take the first two sentences
        const firstTwo = sentences.slice(0, 2);
        
        // Join them back together and trim whitespace
        let summary = firstTwo.join('.').trim() + '.';
        
        // Truncate to a maximum of 50 words
        const words = summary.split(/\s+/);
        if (words.length > 50) {
            summary = words.slice(0, 50).join(' ') + '...';
        }
        
        return summary;
    }

    // Initial bot message
    loadChatHistory();
    addMessage('What do you want to build?', 'bot');
});

document.addEventListener('DOMContentLoaded', () => {
    const menuToggle = document.getElementById('menu-toggle');
    const mobileMenu = document.getElementById('mobile-menu');

    menuToggle?.addEventListener('click', () => {
        mobileMenu.classList.toggle('hidden');
    });
});

let inSelectionMode = false;
let selectedElementHTML = null;

function toggleSelectionMode() {
    inSelectionMode = !inSelectionMode;
    setExpandedToFalse(); // decrease chatbot size so that user can see more of the elements on the page.
    document.body.classList.toggle('selection-mode');
    console.log('Selection mode:', inSelectionMode ? 'ON' : 'OFF');
}

function handleElementSelection(event) {
    if (!inSelectionMode) return;
    event.preventDefault();
    event.stopPropagation();

    const selectedElement = event.target;
    console.log('Selected element:', selectedElement);

    // Remove the selection class from any previously selected element
    const previouslySelected = document.querySelector('.selected-element');
    if (previouslySelected) {
        previouslySelected.classList.remove('selected-element');
    }

    // Add selection class to the newly selected element
    selectedElement.classList.add('selected-element');

    // Here you can do whatever you want with the selected element
    window.lastSelectedElement = selectedElement;

    // Trigger a custom event
    const customEvent = new CustomEvent('elementSelected', { detail: selectedElement });
    document.dispatchEvent(customEvent);

    // Turn off selection mode after selecting an element
    toggleSelectionMode();
}

// Add necessary event listeners
document.addEventListener('click', handleElementSelection, true);

// Add some basic styles if they haven't been added yet
if (!document.getElementById('selection-mode-styles')) {
    const style = document.createElement('style');
    style.id = 'selection-mode-styles';
    style.textContent = `
        .selection-mode * {
            cursor: pointer !important;
        }
        .selection-mode *:hover {
            outline: 2px solid red !important;
        }
        .selected-element {
            position: relative;
        }
        .selected-element::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            border: 4px solid #3B82F6;
            background-color: rgba(59, 130, 246, 0.1);
            pointer-events: none;
            z-index: 9999;
        }
    `;
    document.head.appendChild(style);
}
// Listen for custom elementSelected event
document.addEventListener('elementSelected', (e) => {
    selectedElementHTML = e.detail;
    
    let selectedElementContainer = document.getElementById('selectedElementContainer');
    let selectedElementContent = document.getElementById('selectedElementContent');
    if (selectedElementHTML != null && selectedElementContainer != null) {
        selectedElementContainer.style.display = 'block';
        selectedElementContent.innerHTML = selectedElementHTML.outerHTML;
        setSelectedElementContainerBackground(selectedElementHTML);
    }

    console.log('Element selected event:', selectedElementHTML);
});

// Add this to the end of the script
document.getElementById('closeSelectedElement').addEventListener('click', function() {
    console.log('Selected element closed');
    document.getElementById('selectedElementContainer').style.display = 'none';
    document.getElementById('selectedElementContent').innerHTML = '';
});

let isExpanded = false; // Change this to true
const chatbotContainer = document.getElementById('chatbotContainer');
const expandButton = document.getElementById('expandButton');

// Add this function to set the expanded size
function setExpandedSize() {
    isExpanded = true;
    chatbotContainer.style.width = '800px';
    chatbotContainer.style.height = '800px';
}

function setExpandedToFalse() {
    isExpanded = false;
    chatbotContainer.style.width = '480px';
    chatbotContainer.style.height = '576px';
}

// Call this function immediately after the page loads

expandButton.addEventListener('click', function() {
    isExpanded = !isExpanded;
    if (isExpanded) {
        setExpandedSize();
    } else {
        chatbotContainer.style.width = '480px';
        chatbotContainer.style.height = '576px';
    }
});

// Add this function to your existing JavaScript // this is for readability of the selected snippet 
function setSelectedElementContainerBackground(selectedElement) {
    const container = document.getElementById('selectedElementContainer');
    const content = document.getElementById('selectedElementContent');
    
    // Get the background color of the parent element
    let bgColor = window.getComputedStyle(selectedElement.parentElement).backgroundColor;
    
    // If the background is transparent, try to find the nearest parent with a background
    let parent = selectedElement.parentElement;
    while (bgColor === 'rgba(0, 0, 0, 0)' && parent.parentElement) {
        parent = parent.parentElement;
        bgColor = window.getComputedStyle(parent).backgroundColor;
    }
    
    // Set the background color of the container
    container.style.backgroundColor = bgColor;
    
    // Adjust text color for better contrast
    const rgb = bgColor.match(/\d+/g);
    if (rgb) {
        const brightness = (parseInt(rgb[0]) * 299 + parseInt(rgb[1]) * 587 + parseInt(rgb[2]) * 114) / 1000;
        content.style.color = brightness > 125 ? 'black' : 'white';
    }
}

// Add this near the end of the script
document.addEventListener('DOMContentLoaded', () => {
    const toggleImagesButton = document.getElementById('toggleImagesForUserToSelect');
    const imagesContainer = document.getElementById('imagesForUserToSelect');

    // Initially hide the images container
    imagesContainer.style.display = 'none';

    toggleImagesButton.addEventListener('click', () => {
        if (imagesContainer.style.display === 'none') {
            imagesContainer.style.display = 'block';
        } else {
            imagesContainer.style.display = 'none';
        }
    });
});

document.getElementById('historyButton').addEventListener('click', function() {
    // Toggle the history drawer
    const historyDrawer = document.getElementById('historyDrawer');
    if (historyDrawer.classList.contains('hidden')) {
        historyDrawer.classList.remove('hidden');
    } else {
        historyDrawer.classList.add('hidden');
    }
});

document.getElementById('closeHistoryDrawer').addEventListener('click', function() {
    document.getElementById('historyDrawer').classList.add('hidden');
});
</script>