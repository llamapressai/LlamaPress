<script data-llama="exclude_when_saving_contenteditable_edits" src="https://cdn.jsdelivr.net/npm/hash-wasm"></script>
<script data-llama="exclude_when_saving_contenteditable_edits" src="https://bundle.run/buffer@6.0.3"></script>
<script data-llama="exclude_when_saving_contenteditable_edits" src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
<script data-llama="exclude_when_saving_contenteditable_edits" src="https://cdnjs.cloudflare.com/ajax/libs/marked/4.2.12/marked.min.js"></script>
<script data-llama="exclude_when_saving_contenteditable_edits" src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js"></script>
<script data-llama="exclude_when_saving_contenteditable_edits" src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-markup.min.js"></script>
<link data-llama="exclude_when_saving_contenteditable_edits" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism.min.css" rel="stylesheet" />
<script data-llama="exclude_when_saving_contenteditable_edits">
  document.addEventListener("DOMContentLoaded", () => {
    const chatIcon = document.getElementById("chatIcon");
    const chatbotContainer = document.getElementById("chatbotContainer");
    const closeButton = document.getElementById("closeButton");
    const chatbotMessages = document.getElementById("chatbotMessages");
    const userInput = document.getElementById("userInput");
    const sendButton = document.getElementById("sendButton");

    const modal = document.getElementById("historyModal");
    const closeModal = document.getElementById("closeModal");
    const leftArrow = document.getElementById("leftArrow");
    const rightArrow = document.getElementById("rightArrow");

    closeModal.addEventListener("click", () => {
      modal.classList.add("hidden");
      modal.classList.remove("flex");
    });

    leftArrow.addEventListener("click", () => {
      // Implement left navigation logic
    });

    rightArrow.addEventListener("click", () => {
      // Implement right navigation logic
    });

    // Example: Open modal on button click
    // const openHistoryModalButton = document.getElementById('openHistoryModalButton');
    // openHistoryModalButton.addEventListener('click', openHistoryModal);

    let isOpen = false;
    let isLoading = false;
    let messages = [];

    function makeLoadingSpinner() {
      const spinner = document.createElement("div");
      spinner.innerHTML = `
        <div class="grid grid-cols-[40px_auto] gap-4 items-center w-full">
        <div class="grid min-h-[20px] w-full place-items-center overflow-x-scroll rounded-lg p-6 lg:overflow-visible">
        <svg class="text-gray-300 animate-spin" viewBox="0 0 64 64" fill="none" xmlns="http://www.w3.org/2000/svg"
            width="24" height="24">
            <path
            d="M32 3C35.8083 3 39.5794 3.75011 43.0978 5.20749C46.6163 6.66488 49.8132 8.80101 52.5061 11.4939C55.199 14.1868 57.3351 17.3837 58.7925 20.9022C60.2499 24.4206 61 28.1917 61 32C61 35.8083 60.2499 39.5794 58.7925 43.0978C57.3351 46.6163 55.199 49.8132 52.5061 52.5061C49.8132 55.199 46.6163 57.3351 43.0978 58.7925C39.5794 60.2499 35.8083 61 32 61C28.1917 61 24.4206 60.2499 20.9022 58.7925C17.3837 57.3351 14.1868 55.199 11.4939 52.5061C8.801 49.8132 6.66487 46.6163 5.20749 43.0978C3.7501 39.5794 3 35.8083 3 32C3 28.1917 3.75011 24.4206 5.2075 20.9022C6.66489 17.3837 8.80101 14.1868 11.4939 11.4939C14.1868 8.80099 17.3838 6.66487 20.9022 5.20749C24.4206 3.7501 28.1917 3 32 3L32 3Z"
            stroke="currentColor" stroke-width="5" stroke-linecap="round" stroke-linejoin="round"></path>
            <path
            d="M32 3C36.5778 3 41.0906 4.08374 45.1692 6.16256C49.2477 8.24138 52.7762 11.2562 55.466 14.9605C58.1558 18.6647 59.9304 22.9531 60.6448 27.4748C61.3591 31.9965 60.9928 36.6232 59.5759 40.9762"
            stroke="currentColor" stroke-width="5" stroke-linecap="round" stroke-linejoin="round" class="text-gray-900">
            </path>
        </svg>
        </div>
        <span class="thinking-pulse">Thinking... (this may take a while)</span>
        </div>`.trim();
      return spinner.firstElementChild;
    }

    function toggleChat() {
      isOpen = !isOpen;
      chatbotContainer.classList.toggle("hidden", !isOpen);
    }

    function formatMessage(text) {
      // Custom renderer to handle code blocks
      const renderer = new marked.Renderer();
      renderer.code = (code, language) => {
        const validLanguage = Prism.languages[language] ? language : 'markup';
        const highlightedCode = Prism.highlight(code, Prism.languages[validLanguage], validLanguage);
        const uniqueId = 'code-' + Math.random().toString(36).substr(2, 9);
        return `
          <div class="relative">
            <pre class="language-${validLanguage}"><code id="${uniqueId}">${highlightedCode}</code></pre>
            <button class="copy-button absolute top-2 right-2 bg-gray-200 hover:bg-gray-300 rounded px-2 py-1 text-sm" onclick="copyCode('${uniqueId}')">Copy</button>
          </div>
        `;
      };

      // Configure marked options
      marked.setOptions({
        renderer: renderer,
        highlight: (code, lang) => {
          const language = Prism.languages[lang] ? lang : 'markup';
          return Prism.highlight(code, Prism.languages[language], language);
        },
        breaks: true,
        gfm: true
      });

      // Parse the markdown
      return marked.parse(text);
    }

    function addMessage(text, sender) {
      const messageDiv = document.createElement("div");
      messageDiv.className = `mb-2 p-2 rounded ${
        sender === "bot" ? "bg-blue-100 self-start" : "bg-green-100 self-end"
      }`;
      
      const formattedContent = formatMessage(text);
      messageDiv.innerHTML = formattedContent;
      
      chatbotMessages.appendChild(messageDiv);
      chatbotMessages.scrollTop = chatbotMessages.scrollHeight;
    }

    function showLoadingIndicator() {
      const spinner = makeLoadingSpinner();
      const loadingDiv = document.createElement("div");
      loadingDiv.id = "loadingIndicator";
      loadingDiv.appendChild(spinner);
      chatbotMessages.appendChild(loadingDiv);
    }

    function hideLoadingIndicator() {
      const loadingDiv = document.getElementById("loadingIndicator");
      if (loadingDiv) {
        loadingDiv.remove();
      }
    }

    async function sendMessage() {
      if (userInput.value.trim() === "" || isLoading) return;

      const userMessage = userInput.value;
      addMessage(userMessage, "user");
      userInput.value = "";
      isLoading = true;
      showLoadingIndicator();
      let selectedElement = document.getElementById("selectedElementContent");
      let selectedElementInnerHtml = selectedElement.innerHTML.replace(
        "selected-element",
        ""
      ); //remove this class so the LLM doesn't save it after it's used.

      try {
        const response = await fetch("/llama_bot/message.json", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            message: userMessage,
            context: "<%=@view_path%>",
            selectedElement: selectedElementInnerHtml,
            webPageId: "<%=@page&.id%>",
          }),
        });
        const data = await response.json();

        // Only reload the window if we got a page replacement
        // in the return
        const dtIndex = data?.response?.indexOf("<!DOCTYPE") ?? -1;
        if (dtIndex >= 0 && dtIndex < 50) {
          window.location.reload();
        }
        addMessage(data.response, "bot");
      } catch (error) {
        console.error("Error sending message to ChatGPT:", error);
      } finally {
        isLoading = false;
        hideLoadingIndicator();
      }
    }

    chatIcon.addEventListener("click", toggleChat);
    closeButton.addEventListener("click", toggleChat);
    sendButton.addEventListener("click", sendMessage);
    userInput.addEventListener("keydown", (e) => {
      if (e.key === "Enter") {
        if (e.shiftKey || e.altKey || e.metaKey) {
          // Allow new line on Shift+Enter, Option(Alt)+Enter, or Command(Meta)+Enter
          return;
        }
        e.preventDefault(); // Prevent default Enter behavior
        sendMessage();
      }
    });

    function loadChatHistory() {
      let webPageId = "<%=@page&.id%>";
      if (webPageId) {
        //TODO: fetch Chat History from /web_page_histories IF this web_page_id is present in the URL
        fetch(`/pages/${webPageId}/histories.json`)
          .then((response) => {
            if (!response.ok) {
              throw new Error("Network response was not ok");
            }
            return response.json();
          })
          .then((data) => {
            web_page_histories = data.web_page_histories;
            web_page_histories.forEach((history) => {
              addWebPageHistoryToHistoryDrawer(history);
            });
          });
      }
    }

    /**
     * Add entry to web page history to the history drawer.
     * @param {object} webPageHistory - The web page history to add.
     */
    function addWebPageHistoryToHistoryDrawer(webPageHistory) {
      const historyDrawer = document.getElementById("historyList");
      const historyItem = document.createElement("div");
      historyItem.className =
        "history-item cursor-pointer hover:bg-gray-100 p-2";
      prompt = webPageHistory.prompt || webPageHistory.user_message;
      historyItem.textContent = summarizePrompt(prompt);
      historyItem.onclick = function () {
        const modal = document.getElementById("historyModal"); // Get modal element
        const mainIframe = document.getElementById("mainIframe");
        mainIframe.innerHTML = atob(webPageHistory.content);
        document.getElementById("userPrompt").innerHTML =
          webPageHistory.user_message;
        modal.classList.remove("hidden");
        modal.classList.add("flex");
        document
          .getElementById("restoreButton")
          .setAttribute("llama-data-web-page-history-id", webPageHistory.id);
      };
      historyDrawer.appendChild(historyItem);
    }

    document
      .getElementById("restoreButton")
      .addEventListener("click", function () {
        console.log("restoreButton clicked");
        // we need to do a POST with the webPageHistory.id to /pages/restore
        let webPageId = "<%=@page&.id%>";
        //QUESTION: how do I get this webpagehistory id?
        // we save it to the restoreButton so that when the user clicks on the history item.. we have the ID.

        const webPageHistoryId = document
          .getElementById("restoreButton")
          .getAttribute("llama-data-web-page-history-id");

        fetch(
          `/pages/${webPageId}/restore.json?page_history_id=${webPageHistoryId}`,
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              web_page_history_id: webPageHistoryId,
            }),
          }
        )
          .then((response) => {
            if (response.ok) {
              return response.json();
            } else {
              throw new Error("Couldn't restore");
            }
          })
          .then((data) => {
            alert("Web page restored");
            console.log("Web page restored:", data);
            location.reload();
          });
      });

    /**
     * Return Summary of Prompt so user understand chat history better.
     * @param {string} prompt - The original prompt from the user.
     * @returns {string} - A summary of the prompt.
     */
    function summarizePrompt(prompt) {
      //if null, return empty string
      if (prompt == null) {
        return "";
      }
      // Split the text into sentences
      const sentences = prompt.split(".");

      // Take the first two sentences
      const firstTwo = sentences.slice(0, 2);

      // Join them back together and trim whitespace
      let summary = firstTwo.join(".").trim() + ".";

      // Truncate to a maximum of 50 words
      const words = summary.split(/\s+/);
      if (words.length > 50) {
        summary = words.slice(0, 50).join(" ") + "...";
      }

      return summary;
    }

    const toggleCodeSnippetsButton = document.getElementById('toggleCodeSnippets');
    const codeSnippetsContainer = document.getElementById('codeSnippetsContainer');

    toggleCodeSnippetsButton.addEventListener('click', function() {
        codeSnippetsContainer.classList.toggle('hidden');
    });

    // Initial bot message
    loadChatHistory();
    addMessage("What do you want to build?", "bot");

    document.addEventListener('keydown', function(e) {
    // Check if Cmd+shift+L (Mac) or Ctrl+shift+L (Windows/Linux) is pressed to put content into chatbot container
    if ((e.metaKey || e.ctrlKey) && e.shiftKey && e.key === 'l') {
        e.preventDefault(); // Prevent default browser behavior
        //Get the current text selected by the cursor
        const selectedText = window.getSelection().toString();
        //$("#chatbotContainer").show();
        if (!isOpen) {
        toggleChat();
        }
        $("#userInput").val(selectedText);
        $("#userInput").focus();
      }
    });

  });

  document.addEventListener("DOMContentLoaded", () => {
    const menuToggle = document.getElementById("menu-toggle");
    const mobileMenu = document.getElementById("mobile-menu");

    menuToggle?.addEventListener("click", () => {
      mobileMenu.classList.toggle("hidden");
    });
  });









  let inSelectionMode = false;
  let selectedElementHTML = null;

  function toggleSelectionMode() {
    inSelectionMode = !inSelectionMode;
    const chatbotContainer = document.getElementById("chatbotContainer");
    if (inSelectionMode) {
      document.body.classList.add("selection-mode");
      chatbotContainer.classList.add("hidden");
    }
    if (!inSelectionMode) {
      document.body.classList.remove("selection-mode");
      chatbotContainer.classList.remove("hidden");
    }

    console.log("Selection mode:", inSelectionMode ? "ON" : "OFF");
  }

  function handleElementSelection(event) {
    if (!inSelectionMode) return;
    event.preventDefault();
    event.stopPropagation();

    const selectedElement = event.target;
    console.log("Selected element:", selectedElement);

    // Remove the selection class from any previously selected element
    const previouslySelected = document.querySelector(".selected-element");
    if (previouslySelected) {
      previouslySelected.classList.remove("selected-element");
    }

    // Add selection class to the newly selected element
    selectedElement.classList.add("selected-element");

    // Here you can do whatever you want with the selected element
    window.lastSelectedElement = selectedElement;

    // Trigger a custom event
    const customEvent = new CustomEvent("elementSelected", {
      detail: selectedElement,
    });
    document.dispatchEvent(customEvent);

    // Turn off selection mode after selecting an element
    toggleSelectionMode();
  }

  // Add necessary event listeners
  document.addEventListener("click", handleElementSelection, true);

  // Listen for custom elementSelected event
  document.addEventListener("elementSelected", (e) => {
    selectedElementHTML = e.detail;

    let selectedElementContainer = document.getElementById(
      "selectedElementContainer"
    );
    let selectedElementContent = document.getElementById(
      "selectedElementContent"
    );
    if (selectedElementHTML != null && selectedElementContainer != null) {
      selectedElementContainer.style.display = "block";
      selectedElementContent.innerHTML = selectedElementHTML.outerHTML;
      setSelectedElementContainerBackground(selectedElementHTML);
    }

    console.log("Element selected event:", selectedElementHTML);
  });

  // Add this to the end of the script
  document
    .getElementById("closeSelectedElement")
    .addEventListener("click", function () {
      console.log("Selected element closed");
      document.getElementById("selectedElementContainer").style.display =
        "none";
      document.getElementById("selectedElementContent").innerHTML = "";
    });

  let isExpanded = false;
  const chatbotContainer = document.getElementById("chatbotContainer");
  const expandButton = document.getElementById("expandButton");

  function setExpandedSize() {
    isExpanded = true;
    const screenWidth = window.innerWidth;
    const screenHeight = window.innerHeight;

    if (screenWidth < 768) {
      // Mobile devices
      chatbotContainer.style.width = "80%";
      chatbotContainer.style.height = "90%";
      chatbotContainer.style.maxWidth = "none";
      chatbotContainer.style.maxHeight = "none";
    } else if (screenWidth < 1024) {
      // Tablets
      chatbotContainer.style.width = "80%";
      chatbotContainer.style.height = "80%";
      chatbotContainer.style.maxWidth = "600px";
      chatbotContainer.style.maxHeight = "800px";
    } else {
      // Desktops
      chatbotContainer.style.width = "800px";
      chatbotContainer.style.height = "800px";
      chatbotContainer.style.maxWidth = "80%";
      chatbotContainer.style.maxHeight = "80%";
    }
  }

  function setCollapsedSize() {
    isExpanded = false;
    const screenWidth = window.innerWidth;

    if (screenWidth < 768) {
      // Mobile devices
      chatbotContainer.style.width = "100%";
      chatbotContainer.style.height = "50%";
      chatbotContainer.style.maxWidth = "none";
      chatbotContainer.style.maxHeight = "none";
    } else {
      chatbotContainer.style.width = "480px";
      chatbotContainer.style.height = "576px";
      chatbotContainer.style.maxWidth = "80%";
      chatbotContainer.style.maxHeight = "80%";
    }
  }

  function toggleExpand() {
    if (isExpanded) {
      setCollapsedSize();
    } else {
      setExpandedSize();
    }
  }

  // Call this function initially and on window resize
  function updateChatbotSize() {
    if (isExpanded) {
      setExpandedSize();
    } else {
      setCollapsedSize();
    }
  }


  // Add event listeners
  expandButton.addEventListener("click", toggleExpand);
  window.addEventListener("resize", updateChatbotSize);

  // Initial setup
  document.addEventListener("DOMContentLoaded", () => {
    setCollapsedSize(); // Start with collapsed size
  });

  // Add this function to the end of the script
  function setSelectedElementContainerBackground(selectedElement) {
    const container = document.getElementById("selectedElementContainer");
    const content = document.getElementById("selectedElementContent");

    // Get the background color of the parent element
    let bgColor = window.getComputedStyle(
      selectedElement.parentElement
    ).backgroundColor;

    // If the background is transparent, try to find the nearest parent with a background
    let parent = selectedElement.parentElement;
    while (bgColor === "rgba(0, 0, 0, 0)" && parent.parentElement) {
      parent = parent.parentElement;
      bgColor = window.getComputedStyle(parent).backgroundColor;
    }

    // Set the background color of the container
    container.style.backgroundColor = bgColor;

    // Adjust text color for better contrast
    const rgb = bgColor.match(/\d+/g);
    if (rgb) {
      const brightness =
        (parseInt(rgb[0]) * 299 +
          parseInt(rgb[1]) * 587 +
          parseInt(rgb[2]) * 114) /
        1000;
      content.style.color = brightness > 125 ? "black" : "white";
    }
  }

  // Add this near the end of the script
  document.addEventListener("DOMContentLoaded", () => {
    const toggleImagesButton = document.getElementById(
      "toggleImagesForUserToSelect"
    );
    const imagesContainer = document.getElementById("imagesForUserToSelect");

    // Initially hide the images container
    imagesContainer.style.display = "none";

    toggleImagesButton.addEventListener("click", () => {
      if (imagesContainer.style.display === "none") {
        imagesContainer.style.display = "block";
      } else {
        imagesContainer.style.display = "none";
      }
    });
  });

  document
    .getElementById("historyButton")
    .addEventListener("click", function () {
      // Toggle the history drawer
      const historyDrawer = document.getElementById("historyDrawer");
      if (historyDrawer.classList.contains("hidden")) {
        historyDrawer.classList.remove("hidden");
      } else {
        historyDrawer.classList.add("hidden");
      }
    });

  document
    .getElementById("closeHistoryDrawer")
    .addEventListener("click", function () {
      document.getElementById("historyDrawer").classList.add("hidden");
    });

    const chunkSize = 64 * 1024 * 1024;
    const fileReader = new FileReader();
    let hasher = null;

    const imageBlobIdsToAttachToJobRequest = []; // This is an array with the image blob IDs that we need to pass as a parameter into job_requests so it can attach these images to the job_request after it's been created.


    function submitPreuploadedS3ImagesToServer(){
        const csrfToken = "<%= form_authenticity_token %>";
        console.log("Made it with these image blob IDs!");
        console.log(imageBlobIdsToAttachToJobRequest);
        
        
        const path = window.location.pathname;
        const segments = path.split('/');
        const slug = segments[segments.length - 1];
        $.post({
            url: "/attach_multiple_pre_uploaded_s3_blobs_to_sites.json",
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-Token': csrfToken
            },
            data: JSON.stringify({ // Convert data to JSON string
                image_blob_ids: imageBlobIdsToAttachToJobRequest,
                site_slug: slug
             }),
            success: function(response) {
            console.log("Images attached to site successfully!");
            document.getElementById('imagesDoneUploading').classList.add('hidden');
            
            const previewContainer = document.querySelector('#upload-preview');
            if (previewContainer) {
                previewContainer.innerHTML = '';
                previewContainer.classList.add('hidden')
            }
                        
            
            
            fetchImagesForSite() 
            $('#submitButton').hide() 
            $('#imagesDoneUploading').hide()
            //window.location.href = "/view_images_and_assign_them_to_job";

            // Handle success response, e.g., show success message to user
            },
            error: function(jqXHR, textStatus, errorThrown) {
            console.error("Error attaching images to business:", textStatus, errorThrown);
            // Handle error, e.g., show error message to user
            document.getElementById('imagesDoneUploading').classList.add('hidden');
            }
        });
    }



    async function get_file_name(input){
    const file_name = document.getElementById('image_holder');
    const uploadText = file_name.files.length > 1 ? 'Upload your images ('+file_name.files.length+' files)' : 'Upload your images ('+file_name.files[0].name+')';
    const csrfToken = "<%= form_authenticity_token %>";
    //$('#file_name_show').html(uploadText);
    const previewContainer = document.querySelector('#upload-preview');
    previewContainer.innerHTML = ''; // Clear previous previews
    
    let uploadPromises = [];

    //disable the submit button until all images are finished being uploaded.
    document.getElementById('submitButton').disabled = true; // Re-enable the submit button
    // document.getElementById('submitButton').disabled = true; // Re-enable the submit button
    $('#imageUploadingLabel').show();
    $('#imagesDoneUploading').hide();

    $('#submitButton').addClass('is-loading');

    //TODO: how do we iterate over these images and upload them?
    // /jobs_requests/pre_signed_s3_url_for_uploading_images
    // Check if browser supports FileReader
    if (window.FileReader && input.files && input.files.length) {
      //?? We do it with all the images here.?
        for (let i = 0; i < input.files.length; i++) {

          const file = input.files[i];

          // const hex = await RNFS.hash(result.path, 'md5') //get the md5 hash for this image
          const hex = await readFile(file);
          // const base64 = Buffer.from(hex, 'hex').toString('base64') // get the base64 encoded for this image
          const base64 = buffer.Buffer.from(hex, "hex").toString('base64');
          const randomGuid = Math.random().toString(36).substr(2, 5); //get a randomGuid for the image name
          const extensionForImage = getExtenstionFromMimeType(file.type) //get the extension for the image

          const fileHash = {
            filename: file.name || randomGuid + extensionForImage,
            byte_size: file.size, 
            checksum: base64,
            content_type: file.type
          };

          let uploadPromise = new Promise((resolve, reject) => {
            $.ajax({
              type: "POST",
              url: "/sites/pre_signed_s3_url_for_uploading_images.json",
              headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': csrfToken,
                },
              data: JSON.stringify(fileHash),
              success: function(data, textStatus, jqXHR) {
                console.log(data);
                // debugger;  // Uncomment if you need to pause execution here

                //PREVIEW IMAGE SO USER CAN SEE WHAT THEY ARE UPLOADING
                if (file.type.startsWith('image/')) {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        const img = document.createElement('img');
                        img.src = e.target.result;
                        img.alt = "Preview image";
                        img.style.width = '100px';  // or any desired preview size
                        
                        const div = document.createElement('div');
                        div.id = data["key"];
                        div.className = "is-loading";
                        
                        div.appendChild(img);
                        previewContainer.classList.remove('hidden')           // Append the img to the div
                        previewContainer.appendChild(div);  // Append the div to the previewContainer
                    };
                        // $('#upload-preview').addClass('is-loading');

                    reader.readAsDataURL(file);
                } else if (file.type === 'application/pdf') {
                  //TODO: Turn iFrame into document.createElement('iframe')
                  // <iframe src="" title="" align="top" width="100%" frameborder="0" scrolling="auto" target="Message"></iframe>
                  const reader = new FileReader();
                    reader.onload = function(e) {
                        const iframe = document.createElement('iframe');
                        iframe.src = e.target.result;
                        iframe.title = "Preview PDF";
                        iframe.align = "top";
                        iframe.width = "100%";
                        iframe.frameBorder = "0";
                        iframe.scrolling = "auto";
                        iframe.target = "Message";

                        const div = document.createElement('div');
                        div.id = data["key"];
                        div.className = "is-loading";

                        div.appendChild(iframe);           // Append the iframe to the div
                        previewContainer.appendChild(div);  // Append the div to the previewContainer                  
                      }
                  }
                
                imageBlobIdsToAttachToJobRequest.push(data["signed_id"]);

                const signedId = data["signed_id"];
                
                //const hiddenInput = $('<input/>', {
                //  type: 'hidden',
                //  name: 'job_request[images][]', // This name matches the parameter you're allowing in your controller
                //  value: signedId
                //});
                uploadToS3(data, file, resolve, reject);
              },
              error: function(jqXHR, textStatus, errorThrown) {
                console.log("Error uploading s3 blob!");
                console.log(textStatus, errorThrown);
              }
            });
          });
        uploadPromises.push(uploadPromise);
      }
      // Wait for all the images to be uploaded before re-enabling the submit button
      // await Promise.all(uploadPromises);
      // document.getElementById('submitButton').disabled = false; // Re-enable the submit button
      await Promise.all(uploadPromises)
        .then(() => {
            console.log('All uploads complete!');
            document.getElementById('submitButton').disabled = false; // Re-enable the submit button
            $('#submitButton').removeClass('is-loading');
            $('#imageUploadingLabel').hide();
            $('#imagesDoneUploading').show();
            $('#submitButton').show() 
            $('#image_holder').hide()
        })
        .catch(error => {
            console.error('Some uploads failed:', error);
            document.getElementById('submitButton').disabled = false; // Re-enable the submit button
            $('#submitButton').removeClass('is-loading');   
            $('#imageUploadingLabel').hide();     
            $('#imagesDoneUploading').show();    
           
            // Handle the error - maybe inform the user that some uploads failed.
      });
    }
  }

  function uploadToS3(presignedData, file, resolveCallback, failureCallback) {
      $.ajax({
          url: presignedData.url,
          type: 'PUT',
          contentType: presignedData.headers["Content-Type"],
          headers: {
              "Content-MD5": presignedData.headers["Content-MD5"]
          },
          processData: false, // Important, do not process data
          data: file,
          success: function() {
              console.log("Successfully uploaded to S3");
              $(`#${presignedData.key}`).removeClass("is-loading"); //done uploading.
              resolveCallback();
          },
          error: function(jqXHR, textStatus, errorThrown) {
              console.error("Error uploading to S3:", textStatus, errorThrown);
              failureCallback();
          }
      });
  }

// This is how you would call the function inside your success callback:
// uploadToS3(data, file);

  function hashChunk(chunk) {
    return new Promise((resolve, reject) => {
      fileReader.onload = async(e) => {
        const view = new Uint8Array(e.target.result);
        hasher.update(view);
        resolve();
      };

      fileReader.readAsArrayBuffer(chunk);
    });
  }

  const readFile = async(file) => {
    if (hasher) {
      hasher.init();
    } else {
      hasher = await hashwasm.createMD5();
    }

    const chunkNumber = Math.floor(file.size / chunkSize);

    for (let i = 0; i <= chunkNumber; i++) {
      const chunk = file.slice(
        chunkSize * i,
        Math.min(chunkSize * (i + 1), file.size)
      );
      await hashChunk(chunk);
    }

    const hash = hasher.digest();
    return Promise.resolve(hash);
  };

  function getExtenstionFromMimeType(mimeType) {
      const mimeToExtensionMap = {
          'image/jpeg': '.jpg',
          'image/png': '.png',
          'image/gif': '.gif',
          'image/webp': '.webp',
          'image/tiff': '.tiff',
          'image/bmp': '.bmp',
          // Add other mappings as needed
      };

      return mimeToExtensionMap[mimeType] || ''; // return empty string if mimeType is not in the map
  }  

document.addEventListener('DOMContentLoaded', function() {
  let page = 1;
  const imageContainer = document.getElementById('image-container');
  const path = window.location.pathname;
  const segments = path.split('/');
  const slug = segments[segments.length - 1];

  function fetchImagesForSite(page) {
  const csrfToken = "<%= form_authenticity_token %>";
  fetch('/sites/list_images.json', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': csrfToken
    },
    body: JSON.stringify({
      site_slug: slug,
      page: page
    })
  })
  .then(response => response.json())
  .then(data => {
    data.forEach(image => {
      const imgElement = document.createElement('img');
      imgElement.src = image.url;
      imgElement.className = 'w-24 h-24 object-cover rounded-lg m-2';
      imageContainer.appendChild(imgElement);
    });
  })
  .catch(error => console.error('Error fetching images:', error));
}

function handleHorizontalScroll() {

  console.log("Trigger horizontal scroll")
  const scrollContainer = document.getElementById('imagesForUserToSelect');
  const scrollPosition = scrollContainer.scrollLeft + scrollContainer.clientWidth;
  const scrollWidth = scrollContainer.scrollWidth;

  // Check if the scroll position is near the end of the scrollable area
  if (scrollWidth - scrollPosition <= 50) { // Adjust the threshold as needed
    page += 1;
    fetchImagesForSite(page);
  }
}

const scrollContainer = document.getElementById('imagesForUserToSelect');
scrollContainer.addEventListener('scroll', handleHorizontalScroll);
  // Initial fetch
  fetchImagesForSite(page);
});

// Define copyCode in the global scope
  function copyCode(elementId) {
    const codeElement = document.getElementById(elementId);
    const textArea = document.createElement('textarea');
    textArea.value = codeElement.textContent;
    document.body.appendChild(textArea);
    textArea.select();
    document.execCommand('copy');
    document.body.removeChild(textArea);
    
    //TODO: This is a hack to find the copy button. We should use a data attribute to find it.
    let copyButton = codeElement.parentElement.parentElement.children[1];
    copyButton.textContent = 'Copied!';
    copyButton.classList.remove('bg-gray-200', 'hover:bg-gray-300');
    copyButton.classList.add('bg-green-500', 'hover:bg-green-600', 'text-white', 'copy-animation');

    setTimeout(() => {
        copyButton.textContent = 'Copy';
        copyButton.classList.remove('bg-green-500', 'hover:bg-green-600', 'text-white', 'copy-animation');
        copyButton.classList.add('bg-gray-200', 'hover:bg-gray-300');
    }, 2000);
  }

</script>
