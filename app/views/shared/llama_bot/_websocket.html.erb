<script>
  let chatChannel;
  console.log("Loaded...");

  let isLoading = false;
  let lastPongTime = Date.now() - 30000;
  let connectionCheckInterval;

  /**
   * Sets Green, Yellow, Red indicator on the Blue LlamaBot Chat Window status icon, so the user can know if they're connected to LlamaBot Backend or not.
   */
  function updateConnectionStatus() {
    const timeSinceLastPong = Date.now() - lastPongTime;

    let connectionIsActive = timeSinceLastPong < 30000; // We've heard back from LlamaBot Backend in the last 30 seconds
    let connectionMightBeStuck = timeSinceLastPong < 50000; // We've heard back from LlamaBot Backend in the last 50 seconds
    let connectionIsDead = timeSinceLastPong > 50000; // We've not heard back from LlamaBot Backend in the last 50 seconds

    if (connectionIsActive) { //green
      updateStatusIcon('bg-green-500');
    } else if (connectionMightBeStuck) { //yellow
      updateStatusIcon('bg-yellow-400');
    } else { //red
      updateStatusIcon('bg-red-500');
    }
  }

  // Update the status icon with the given color
  function updateStatusIcon(color) {
    const statusIndicator = document.getElementById('statusIcon');
    statusIndicator.classList.remove('bg-yellow-400', 'bg-red-500', 'bg-green-500');  // Remove all existing classes
    statusIndicator.classList.add(color);
  }

  /**
   * Initialize the chat channel (ActionCable). This allows us to send and receive messages to LlamaBot Backend.
   */
  function initializeChat() {
    if (chatChannel) {
        console.log("ChatChannel already initialized.");
        return;
    }
    
    console.log("Initializing Chat...");
    
    const consumer = ActionCable.createConsumer();
    connectionCheckInterval = setInterval(updateConnectionStatus, 1000);
    
    // Initialize ActionCable Consumer (this is the channel we're subscribing to in chat_channel.rb)
    chatChannel = consumer.subscriptions.create(
      { channel: "ChatChannel", session_id: "<%= session.id %>" },
      {
        /**
         * Receives message responses from LlamaBot Backend.
         */
        received(data) {
          console.log("Received response from LlamaBot Backend:", data);

          try {
            // Parse the incoming data - simplify the parsing chain
            const parsed = JSON.parse(data);

            if(parsed.message.type == "external_ws_pong") {
              lastPongTime = Date.now(); // Update last pong time, which will keep the status icon green
              return;
            }

            const parsedData = JSON.parse(parsed.message);

            // This will run regardless of success or failure
            isLoading = false;

            hideLoadingIndicator();
            // Reset send button state
            const sendButton = document.getElementById('sendButton');
            sendButton.textContent = 'Send';
            sendButton.classList.remove('bg-red-500', 'hover:bg-red-600');
            sendButton.classList.add('bg-blue-500', 'hover:bg-blue-600');

            // if (parsedData.content === 'Workflow completed') {
            //   window.location.reload();
            //   return;
            // }
            
            switch (parsedData.type) {
              case 'ai_message':
                addMessage(parsedData.content, "bot");
                break;
              case 'system_message':
                addMessage(parsedData.content, "system");
                break;
              case 'user_input_required':
                addMessage(parsedData.content, "bot");
                break;
              case 'write_code':
                addMessage("Received changes. Writing to the file system...", "system");
                window.location.reload();
                break;
              case 'external_ws_pong':
                lastPongTime = Date.now();
                console.log("Received pong response from LlamaBot Backend, which means we're connected");
                break;
              default:
                console.warn("Unknown message type:", parsedData.type);
                addMessage(`Unknown message type: ${parsedData.type}`, "system");
            }
          } catch (error) {
            console.error("Error parsing or processing received data:", error);
            addMessage(`Error: ${error.message}`, "bot");
                        // This will run regardless of success or failure
            isLoading = false;

            hideLoadingIndicator();
            // Reset send button state
            const sendButton = document.getElementById('sendButton');
            sendButton.textContent = 'Send';
            sendButton.classList.remove('bg-red-500', 'hover:bg-red-600');
            sendButton.classList.add('bg-blue-500', 'hover:bg-blue-600');
          }
        },

        connected() {
          console.log("Connected to ChatChannel");
          // You can add any initialization code here
        },

    disconnected() {
      console.log("Disconnected from ChatChannel. Attempting to reconnect...");
      clearInterval(connectionCheckInterval);
      setTimeout(() => consumer.connection.reopen(), 5000);
    },

    rejected() {
      console.log("Connection to ChatChannel rejected");
      // Add exponential backoff retry logic
      const maxRetries = 5;
      let retryCount = 0;
      
      const retry = () => {
        if (retryCount < maxRetries) {
          const backoffTime = Math.min(1000 * Math.pow(2, retryCount), 30000); // Cap at 30 seconds
          console.log(`Retrying connection in ${backoffTime/1000} seconds... (Attempt ${retryCount + 1}/${maxRetries})`);
          
          setTimeout(() => {
            retryCount++;
            consumer.connection.reopen();
          }, backoffTime);
        } else {
          console.log("Max retry attempts reached. Please refresh the page to try again.");
          addMessage("Connection failed. Please refresh the page to try again.", "system");
        }
      };
      
      retry();
    }
  }
);


// const idleTimeout = 5 * 60 * 1000; // 5 minutes
//     let lastActivity = Date.now();

//     document.addEventListener('mousemove', () => lastActivity = Date.now());
//     document.addEventListener('keypress', () => lastActivity = Date.now());

//     setInterval(() => {
//       if (Date.now() - lastActivity > idleTimeout && !consumer.connection.isOpen()) {
//         console.log("User idle for too long, attempting reconnection...");
//         consumer.connection.reopen();
//       }
//     }, 5000); // Check every 5 seconds
  

document.addEventListener("visibilitychange", function() {
        if (document.visibilityState === 'visible' && !consumer.connection.isOpen()) {
            console.log("Tab is active. Reconnecting...");
            consumer.connection.reopen();
        }
    });



    console.log("ChatChannel created:", chatChannel); // Add this line
  }

    const textarea = document.getElementById('userInput');
    const maxRows = 10; // Set this to your desired maximum number of rows



    let isOpen = false;
    let messages = [];

    function makeLoadingSpinner() {
      const spinner = document.createElement("div");
      spinner.innerHTML = `
        <div class="grid grid-cols-[40px_auto] gap-4 items-center w-full">
        <div class="grid min-h-[20px] w-full place-items-center overflow-x-scroll rounded-lg p-6 lg:overflow-visible">
        <svg class="text-gray-300 animate-spin" viewBox="0 0 64 64" fill="none" xmlns="http://www.w3.org/2000/svg"
            width="24" height="24">
            <path
            d="M32 3C35.8083 3 39.5794 3.75011 43.0978 5.20749C46.6163 6.66488 49.8132 8.80101 52.5061 11.4939C55.199 14.1868 57.3351 17.3837 58.7925 20.9022C60.2499 24.4206 61 28.1917 61 32C61 35.8083 60.2499 39.5794 58.7925 43.0978C57.3351 46.6163 55.199 49.8132 52.5061 52.5061C49.8132 55.199 46.6163 57.3351 43.0978 58.7925C39.5794 60.2499 35.8083 61 32 61C28.1917 61 24.4206 60.2499 20.9022 58.7925C17.3837 57.3351 14.1868 55.199 11.4939 52.5061C8.801 49.8132 6.66487 46.6163 5.20749 43.0978C3.7501 39.5794 3 35.8083 3 32C3 28.1917 3.75011 24.4206 5.2075 20.9022C6.66489 17.3837 8.80101 14.1868 11.4939 11.4939C14.1868 8.80099 17.3838 6.66487 20.9022 5.20749C24.4206 3.7501 28.1917 3 32 3L32 3Z"
            stroke="currentColor" stroke-width="5" stroke-linecap="round" stroke-linejoin="round"></path>
            <path
            d="M32 3C36.5778 3 41.0906 4.08374 45.1692 6.16256C49.2477 8.24138 52.7762 11.2562 55.466 14.9605C58.1558 18.6647 59.9304 22.9531 60.6448 27.4748C61.3591 31.9965 60.9928 36.6232 59.5759 40.9762"
            stroke="currentColor" stroke-width="5" stroke-linecap="round" stroke-linejoin="round" class="text-gray-900">
            </path>
        </svg>
        </div>
        <span class="thinking-pulse">Thinking... (this may take a while)</span>
        </div>`.trim();
      return spinner.firstElementChild;
    }

    function toggleChat() {
      isOpen = !isOpen;
      chatbotContainer.classList.toggle("hidden", !isOpen);
    }

    function addMessage(text, sender) {
      const messageDiv = document.createElement("div");
      messageDiv.className = `mb-2 p-2 rounded ${
        sender === "bot" ? "bg-blue-100" : sender === "user" ? "bg-green-100" : "bg-gray-100"
      } ${sender === "bot" ? "self-start" : sender === "user" ? "self-end" : "self-center"}`;
      
      const formattedContent = formatMessage(text, sender);
      messageDiv.innerHTML = formattedContent;
      chatbotMessages.appendChild(messageDiv);
      chatbotMessages.scrollTop = chatbotMessages.scrollHeight;
    }

    function escapeHtml(unsafe) {
      return unsafe
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;");
    }


    function showLoadingIndicator() {
      const spinner = makeLoadingSpinner();
      const loadingDiv = document.createElement("div");
      loadingDiv.id = "loadingIndicator";
      loadingDiv.appendChild(spinner);
      chatbotMessages.appendChild(loadingDiv);
    }

    //function hideLoadingIndicator() {
    //  const loadingDiv = document.getElementById("loadingIndicator");
    //  if (loadingDiv) {
    //    loadingDiv.remove();
    //  }
    //}

    function autoResizeUserInputArea() {
        textarea.style.height = 'auto';
        const newHeight = Math.min(textarea.scrollHeight, textarea.rows * 24 * maxRows);
        textarea.style.height = newHeight + 'px';
        //minimum make it 2 rows
        if (newHeight < 24) {
          textarea.style.height = '24px';
        }
    }


    function formatMessage(text, sender) {
      // Custom renderer to handle code blocks
      const renderer = new marked.Renderer();
      renderer.code = (code, language) => {
        const validLanguage = Prism.languages[language] ? language : 'markup';
        const highlightedCode = Prism.highlight(code, Prism.languages[validLanguage], validLanguage);
        const escapedCode = escapeHtml(highlightedCode);
        const uniqueId = 'code-' + Math.random().toString(36).substr(2, 9);
        return `
          <div class="relative">
            <pre class="language-${validLanguage}"><code id="${uniqueId}">${sender == "user" ? code : escapedCode}</code></pre>
            <button class="copy-button absolute top-2 right-2 bg-gray-200 hover:bg-gray-300 rounded px-2 py-1 text-sm" onclick="copyCode('${uniqueId}')">Copy</button>
          </div>
        `;
      };

      // Configure marked options
      marked.setOptions({
        renderer: renderer,
        highlight: (code, lang) => {
          const language = Prism.languages[lang] ? lang : 'markup';
          return Prism.highlight(code, Prism.languages[language], language);
        },
        breaks: true,
        gfm: true
      });

      // Parse the markdown
      if (sender == "user") {
        return marked.parse(escapeHtml(text));
      }
      else {
        return marked.parse(text);
      }
    }

/**
 * This is the button handler for when the user clicks "send" on the chatbot.
 */
async function sendUserMessageOverSocket(userMessage, selectedElementInnerHtml, errorCallback) {
  try {
    if (chatChannel && chatChannel.send) {
      // Add selected images if any exist
      if (window.selectedImages && window.selectedImages.size > 0) {
        userMessage += "\n\nThe user selected the following images:\n" + 
          Array.from(window.selectedImages).join('\n');
        
        // Clear selected images after sending
        window.selectedImages.clear();
        
        // Remove visual selection from all images
        document.querySelectorAll('#image-container img').forEach(img => {
          img.classList.remove('border-2', 'border-red-500', 'shadow-md', 'shadow-red-200');
        });
      }

      // Change button state and add click handler for cancel
      const sendButton = document.getElementById('sendButton');
      sendButton.textContent = 'Cancel';
      sendButton.classList.remove('bg-blue-500', 'hover:bg-blue-600');
      sendButton.classList.add('bg-red-500', 'hover:bg-red-600');
      
      // Add cancel click handler
      const cancelHandler = () => {
        console.log("Cancel Sent");
        
        // Update the thinking text to "Cancelling..."
        const thinkingElement = document.querySelector('.thinking-pulse');
        if (thinkingElement) {
          thinkingElement.textContent = 'Cancelling...';
        }
        
        // Update button text and disable it temporarily
        const sendButton = document.getElementById('sendButton');
        sendButton.textContent = 'Cancelling...';
        sendButton.disabled = true;
        
        chatChannel.send({
          user_message: "cancel",
          type: "cancel",
          message_type: "cancel",
          context: "<%=@view_path%>",
          webPageId: "<%=@page&.id%>",
        });
        
        // Remove the cancel handler after it's used
        sendButton.removeEventListener('click', cancelHandler);
        
        // Re-enable the button after a short delay
        setTimeout(() => {
          sendButton.disabled = false;
          sendButton.textContent = 'Send';
          sendButton.classList.remove('bg-red-500', 'hover:bg-red-600');
          sendButton.classList.add('bg-blue-500', 'hover:bg-blue-600');
        }, 1000);
      };
      
      sendButton.addEventListener('click', cancelHandler);
      
      chatChannel.send({
        message: userMessage,
        context: "<%=@view_path%>",
        selectedElement: selectedElementInnerHtml,
        webPageId: "<%=@page&.id%>",
        message_type: "message"
      });
    } else {
      console.error("Chat channel not initialized yet");
    }
  } catch (error) {
    console.error("Error sending message:", error);
    errorCallback(error);
  }
}
window.sendUserMessageOverSocket = sendUserMessageOverSocket;
    
</script>
<script src="https://cdn.jsdelivr.net/npm/@rails/actioncable@7.0.0" onload="initializeChat()"></script>

