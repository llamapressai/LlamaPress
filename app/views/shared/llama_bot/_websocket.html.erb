<script>
  let chatChannel;
  console.log("Loaded...");

  let isLoading = false;

  /**
   * Initialize the chat channel (ActionCable). This allows us to send and receive messages to LlamaBot Backend.
   */
  function initializeChat() {
    if (chatChannel) {
        console.log("ChatChannel already initialized.");
        return;
    }
    
    console.log("Initializing Chat...");
    
    const consumer = ActionCable.createConsumer();
    
    // Initialize ActionCable Consumer (this is the channel we're subscribing to in chat_channel.rb)
    chatChannel = consumer.subscriptions.create(
      { channel: "ChatChannel", session_id: "<%= session.id %>" },
      {
        /**
         * Receives message responses from LlamaBot Backend.
         */
        received(data) { // LlamaBot Backend is sending us a message -- let's handle it and format it so the user can see it
          console.log("Received response from LlamaBot Backend:", data);
          try {
            
            // Parse the incoming data
            const parsedData2 = typeof data === "string" ? JSON.parse(data) : data;
            const parsed = JSON.parse(data)
            const parsedData = JSON.parse(parsed.message)

            // Handle the message based on its type
            switch (parsedData.type) {
              case 'ai_message':
                // Display AI-generated messages
                addMessage(parsedData.content, "bot");
                break;

              case 'system_message':
                // Reflect system messages back to the user
                addMessage(parsedData.content, "system");
                break;

              case 'user_input_required':
                // Ask for user input if necessary
                const userInputMessage = parsedData.content;
                addMessage(userInputMessage, "bot");
                // Optionally, you can trigger some action to collect input from the user here
                break;

              case 'write_code':
                // Handle a command to finalize changes, maybe by calling an endpoint or initiating some process
                addMessage("Recieved changes. Writing to the file system...", "system")
                break;

              default:
                console.warn("Unknown message type:", parsedData.type);
                addMessage("Unknown message type received.", "system");
            }
          } catch (error) {
            console.error("Error parsing or processing received data:", error);
            addMessage("There was an error processing the message.", "bot");
          }

          // Optionally handle the 'message_complete' field if it exists
          //   if (parsedData.message_complete) {
          //     const streamContainer = document.getElementById("botStreamContainer");
          //     if (streamContainer) {
          //       streamContainer.id = "";
          //     }
          //   }
        },

        connected() {
          console.log("Connected to ChatChannel");
          // You can add any initialization code here
        },

    disconnected() {
      console.log("Disconnected from ChatChannel. Attempting to reconnect...");
    // You can also implement exponential backoff for reconnection here
      setTimeout(() => consumer.connection.reopen(), 5000);
    },

    rejected() {
      console.log("Connection to ChatChannel rejected");
      // Add exponential backoff retry logic
      const maxRetries = 5;
      let retryCount = 0;
      
      const retry = () => {
        if (retryCount < maxRetries) {
          const backoffTime = Math.min(1000 * Math.pow(2, retryCount), 30000); // Cap at 30 seconds
          console.log(`Retrying connection in ${backoffTime/1000} seconds... (Attempt ${retryCount + 1}/${maxRetries})`);
          
          setTimeout(() => {
            retryCount++;
            consumer.connection.reopen();
          }, backoffTime);
        } else {
          console.log("Max retry attempts reached. Please refresh the page to try again.");
          addMessage("Connection failed. Please refresh the page to try again.", "system");
        }
      };
      
      retry();
    }
  }
);


// const idleTimeout = 5 * 60 * 1000; // 5 minutes
//     let lastActivity = Date.now();

//     document.addEventListener('mousemove', () => lastActivity = Date.now());
//     document.addEventListener('keypress', () => lastActivity = Date.now());

//     setInterval(() => {
//       if (Date.now() - lastActivity > idleTimeout && !consumer.connection.isOpen()) {
//         console.log("User idle for too long, attempting reconnection...");
//         consumer.connection.reopen();
//       }
//     }, 5000); // Check every 5 seconds
  

document.addEventListener("visibilitychange", function() {
        if (document.visibilityState === 'visible' && !consumer.connection.isOpen()) {
            console.log("Tab is active. Reconnecting...");
            consumer.connection.reopen();
        }
    });



    console.log("ChatChannel created:", chatChannel); // Add this line
  }

    const textarea = document.getElementById('userInput');
    const maxRows = 10; // Set this to your desired maximum number of rows



    let isOpen = false;
    let messages = [];

    function makeLoadingSpinner() {
      const spinner = document.createElement("div");
      spinner.innerHTML = `
        <div class="grid grid-cols-[40px_auto] gap-4 items-center w-full">
        <div class="grid min-h-[20px] w-full place-items-center overflow-x-scroll rounded-lg p-6 lg:overflow-visible">
        <svg class="text-gray-300 animate-spin" viewBox="0 0 64 64" fill="none" xmlns="http://www.w3.org/2000/svg"
            width="24" height="24">
            <path
            d="M32 3C35.8083 3 39.5794 3.75011 43.0978 5.20749C46.6163 6.66488 49.8132 8.80101 52.5061 11.4939C55.199 14.1868 57.3351 17.3837 58.7925 20.9022C60.2499 24.4206 61 28.1917 61 32C61 35.8083 60.2499 39.5794 58.7925 43.0978C57.3351 46.6163 55.199 49.8132 52.5061 52.5061C49.8132 55.199 46.6163 57.3351 43.0978 58.7925C39.5794 60.2499 35.8083 61 32 61C28.1917 61 24.4206 60.2499 20.9022 58.7925C17.3837 57.3351 14.1868 55.199 11.4939 52.5061C8.801 49.8132 6.66487 46.6163 5.20749 43.0978C3.7501 39.5794 3 35.8083 3 32C3 28.1917 3.75011 24.4206 5.2075 20.9022C6.66489 17.3837 8.80101 14.1868 11.4939 11.4939C14.1868 8.80099 17.3838 6.66487 20.9022 5.20749C24.4206 3.7501 28.1917 3 32 3L32 3Z"
            stroke="currentColor" stroke-width="5" stroke-linecap="round" stroke-linejoin="round"></path>
            <path
            d="M32 3C36.5778 3 41.0906 4.08374 45.1692 6.16256C49.2477 8.24138 52.7762 11.2562 55.466 14.9605C58.1558 18.6647 59.9304 22.9531 60.6448 27.4748C61.3591 31.9965 60.9928 36.6232 59.5759 40.9762"
            stroke="currentColor" stroke-width="5" stroke-linecap="round" stroke-linejoin="round" class="text-gray-900">
            </path>
        </svg>
        </div>
        <span class="thinking-pulse">Thinking... (this may take a while)</span>
        </div>`.trim();
      return spinner.firstElementChild;
    }

    function toggleChat() {
      isOpen = !isOpen;
      chatbotContainer.classList.toggle("hidden", !isOpen);
    }

    function addMessage(text, sender) {
      const messageDiv = document.createElement("div");
      messageDiv.className = `mb-2 p-2 rounded ${
        sender === "bot" ? "bg-blue-100" : sender === "user" ? "bg-green-100" : "bg-gray-100"
      } ${sender === "bot" ? "self-start" : sender === "user" ? "self-end" : "self-center"}`;
      
      const formattedContent = formatMessage(text, sender);
      messageDiv.innerHTML = formattedContent;
      chatbotMessages.appendChild(messageDiv);
      chatbotMessages.scrollTop = chatbotMessages.scrollHeight;
    }

    function escapeHtml(unsafe) {
      return unsafe
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;");
    }


    function showLoadingIndicator() {
      const spinner = makeLoadingSpinner();
      const loadingDiv = document.createElement("div");
      loadingDiv.id = "loadingIndicator";
      loadingDiv.appendChild(spinner);
      chatbotMessages.appendChild(loadingDiv);
    }

    function hideLoadingIndicator() {
      const loadingDiv = document.getElementById("loadingIndicator");
      if (loadingDiv) {
        loadingDiv.remove();
      }
    }

    function autoResizeUserInputArea() {
        textarea.style.height = 'auto';
        const newHeight = Math.min(textarea.scrollHeight, textarea.rows * 24 * maxRows);
        textarea.style.height = newHeight + 'px';
        //minimum make it 2 rows
        if (newHeight < 24) {
          textarea.style.height = '24px';
        }
    }


    function formatMessage(text, sender) {
      // Custom renderer to handle code blocks
      const renderer = new marked.Renderer();
      renderer.code = (code, language) => {
        const validLanguage = Prism.languages[language] ? language : 'markup';
        const highlightedCode = Prism.highlight(code, Prism.languages[validLanguage], validLanguage);
        const escapedCode = escapeHtml(highlightedCode);
        const uniqueId = 'code-' + Math.random().toString(36).substr(2, 9);
        return `
          <div class="relative">
            <pre class="language-${validLanguage}"><code id="${uniqueId}">${sender == "user" ? code : escapedCode}</code></pre>
            <button class="copy-button absolute top-2 right-2 bg-gray-200 hover:bg-gray-300 rounded px-2 py-1 text-sm" onclick="copyCode('${uniqueId}')">Copy</button>
          </div>
        `;
      };

      // Configure marked options
      marked.setOptions({
        renderer: renderer,
        highlight: (code, lang) => {
          const language = Prism.languages[lang] ? lang : 'markup';
          return Prism.highlight(code, Prism.languages[language], language);
        },
        breaks: true,
        gfm: true
      });

      // Parse the markdown
      if (sender == "user") {
        return marked.parse(escapeHtml(text));
      }
      else {
        return marked.parse(text);
      }
    }

/**
 * This is the button handler for when the user clicks "send" on the chatbot.
 */
async function handleChatMessageSend() {
  if (userInput.value.trim() === "" || isLoading) return;

  const userMessage = userInput.value;
  addMessage(userMessage, "user");
  userInput.value = "";
  autoResizeUserInputArea();

  isLoading = true;
  showLoadingIndicator();
  let selectedElement = document.getElementById("selectedElementContent");
  let selectedElementInnerHtml = selectedElement.innerHTML.replace(
    "selected-element",
    ""
  );

  try {
    if (chatChannel && chatChannel.send) {
      chatChannel.send({
        message: userMessage,
        context: "<%=@view_path%>",
        selectedElement: selectedElementInnerHtml,
        webPageId: "<%=@page&.id%>",
      });
    } else {
      console.error("Chat channel not initialized yet");
    }
  } catch (error) {
    console.error("Error sending message:", error);
  } finally {
    isLoading = false;
    hideLoadingIndicator();
  }
}
    
</script>
<script src="https://cdn.jsdelivr.net/npm/@rails/actioncable@7.0.0" onload="initializeChat()"></script>

