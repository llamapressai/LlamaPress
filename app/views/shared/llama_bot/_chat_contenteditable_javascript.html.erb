<script data-llama="exclude_when_saving_contenteditable_edits">
document.addEventListener('DOMContentLoaded', () => {
    // Make the entire body editable, except for elements with the specific data-llama attribute
    document.body.contentEditable = true;

    // Find all elements with the data-llama attribute and make them non-editable
    const nonEditableElements = document.querySelectorAll('[data-llama*="exclude_when_saving_contenteditable_edits"]');
    nonEditableElements.forEach(element => {
        element.contentEditable = false;
    });

    let isEditing = false;
    let originalContent = '';
    let saveTimeout;
    let lastElementClicked = null;

    // Function to save changes
    function saveChanges(event) {
        console.log('Saving changes for element:', lastElementClicked);
        let currentContent = document.documentElement.outerHTML;
        // Only save if content has changed
        if (currentContent !== originalContent) {
            //see what node got edited -- check if it has the data-llama-snippet-id attribute, if it does, do an PUT to /snippets/:id with just the nodes of that snippet 
            if (lastElementClicked.hasAttribute('data-llama-snippet-id')) {
                saveSnippetChanges(lastElementClicked);
            } else {
                savePageChanges();
            }
        }
    }

    function saveSnippetChanges(element) {
        const snippetId = element.getAttribute('data-llama-snippet-id');
        let snippetElement = element;
        
        //Find parent snippet element
        while (snippetElement.parentElement && snippetElement.parentElement.hasAttribute('data-llama-snippet-id')) {
            snippetElement = snippetElement.parentElement;
        }
        const snippetContent = snippetElement.outerHTML;

        fetch(`/snippets/${snippetId}.json`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ content: snippetContent }),
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            console.log('Snippet save successful:', data);
            showNotification('Snippet changes saved successfully!', 'success');
        })
        .catch((error) => {
            console.error('Error saving snippet changes:', error);
            showNotification('Error saving snippet changes. Please try again.', 'error');
        });
    }

    function savePageChanges() {
        // Clone the entire document
        const clonedDoc = document.cloneNode(true);

        // Remove nodes that should be excluded
        const nodesToExclude = clonedDoc.querySelectorAll('[data-llama*="exclude_when_saving_contenteditable_edits"]');
        nodesToExclude.forEach(node => {
            node.remove();
        });

        // Find all nodes that are not marked as editable
        const nonEditableNodes = clonedDoc.querySelectorAll(':not([data-llama-editable="true"])');
        nonEditableNodes.forEach(node => {
            if (node.tagName !== 'HTML' && node.tagName !== 'BODY') {
                node.remove();
            }
        });

        // Clean up remaining nodes
        const editableNodes = clonedDoc.querySelectorAll('[data-llama-editable="true"]');
        editableNodes.forEach(node => {
            node.removeAttribute('data-llama-editable');
            node.removeAttribute('contenteditable');
        });

        // Remove 'selected-element' class from any nodes that have it
        const selectedElements = clonedDoc.querySelectorAll('.selected-element');
        selectedElements.forEach(element => {
            element.classList.remove('selected-element');
        });

        // Remove 'selected-element' class from any nodes that have it
        const selectionModeElements = clonedDoc.querySelectorAll('.selection-mode');
        selectionModeElements.forEach(element => {
            element.classList.remove('selection-mode');
        });

        // Get the cleaned HTML content
        let cleanedContent = clonedDoc.documentElement.outerHTML;

        // Remove the contenteditable attribute from the html page so it doesn't get saved to the database.
        cleanedContent = cleanedContent.replace(/\s*contenteditable="true"/g, '');

        // Use a more modern confirmation dialog
        //if (confirm('Save these changes?')) {
            // Show a loading indicator
            const loadingIndicator = document.createElement('div');
            loadingIndicator.setAttribute('data-llama', 'exclude_when_saving_contenteditable_edits'); //Don't save these notifications to the page.
            loadingIndicator.textContent = 'Saving...';
            loadingIndicator.style.position = 'fixed';
            loadingIndicator.style.top = '10px';
            loadingIndicator.style.right = '10px';
            loadingIndicator.style.padding = '10px';
            loadingIndicator.style.background = 'rgba(0,0,0,0.7)';
            loadingIndicator.style.color = 'white';
            loadingIndicator.style.borderRadius = '5px';
            document.body.appendChild(loadingIndicator);

            message = "Edit: " + lastElementClicked.innerHTML;

            fetch('/pages/<%= @page&.id %>.json', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ content: cleanedContent, message: message }),
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                console.log('Save successful:', data);
                originalContent = cleanedContent; // Update original content after successful save
                showNotification('Page changes saved successfully!', 'success');
            })
            .catch((error) => {
                console.error('Error saving changes:', error);
                showNotification('Error saving changes. Please try again.', 'error');
            })
            .finally(() => {
                // Remove the loading indicator
                document.body.removeChild(loadingIndicator);
            });
        //} else {
            //document.body.innerHTML = originalContent; // Revert to original content
            //  console.log('Changes discarded');
        //}
    }

    // Function to update Tailwind classes
    function updateTailwindClasses(img, width, height) {
        const widthClass = `w-${Math.round(width / 4) * 4}`;
        const heightClass = `h-${Math.round(height / 4) * 4}`;
        
        img.classList.forEach(className => {
            if (className.startsWith('w-')) img.classList.remove(className);
            if (className.startsWith('h-')) img.classList.remove(className);
        });
        
        img.classList.add(widthClass, heightClass);
    }

    // Image resizing functionality
    let isResizing = false;
    let currentImage = null;
    let startX, startY, startWidth, startHeight;
    let aspectRatio;

    document.body.addEventListener('mousedown', (e) => {
        lastElementClicked = e.target;
        console.log("lastElementClicked", lastElementClicked);
        if (e.target.tagName === 'IMG' && e.target.parentElement.id !== 'image-container' && !e.target.classList.contains('llama-prevent-img-resize')) {
            isResizing = true;
            currentImage = e.target;
            startX = e.clientX;
            startY = e.clientY;
            startWidth = currentImage.clientWidth;
            startHeight = currentImage.clientHeight;
            aspectRatio = startWidth / startHeight;
            e.preventDefault();
        }
    });

    document.body.addEventListener('mousemove', (e) => {
        if (!isResizing) return;
        const width = startWidth + (e.clientX - startX);
        const height = width / aspectRatio;
        currentImage.style.width = `${width}px`;
        currentImage.style.height = `${height}px`;
        updateTailwindClasses(currentImage, width, height);
    });

    document.body.addEventListener('mouseup', () => {
        if (isResizing) {
            saveChanges(event);
        }
        isResizing = false;
        currentImage = null;
    });

    // Event listener for when editing starts
    document.body.addEventListener('focus', (event) => {
        
        const editableTarget = event.target.closest('[data-llama-editable="true"]');
        if (event.target.isContentEditable) {
            originalContent = document.body.innerHTML;
            isEditing = false;
            currentElementBeingEdited = event.target;
        }
    }, true);

    // Event listener for changes
    document.body.addEventListener('input', (event) => {
        if (event.target.isContentEditable) {
            isEditing = true;
            
            // Clear the existing timeout
            clearTimeout(saveTimeout);
            
            // Set a new timeout to save changes after 2 seconds of inactivity
            saveTimeout = setTimeout(saveChanges, 2000);
            currentElementBeingEdited = event.target;
        }
    }, true);

    // Event listener for when editing ends
    document.body.addEventListener('blur', (event) => {
        if (event.target.isContentEditable && isEditing) {
            clearTimeout(saveTimeout); // Clear any pending save
            saveChanges(event, currentElementBeingEdited); // Save immediately on blur
            isEditing = false;
            currentElementBeingEdited = null;
        }
    }, true);

    // Listen for page unload to save any unsaved changes
    window.addEventListener('beforeunload', (event) => {
        if (isEditing) {
            saveChanges(event);
            event.preventDefault(); // Cancel the event
            event.returnValue = ''; // Display a default message in most browsers
        }
    });

    // Add this function at the end of the DOMContentLoaded event listener
    function showNotification(message, type) {
        const notification = document.createElement('div');
        notification.setAttribute('data-llama', 'exclude_when_saving_contenteditable_edits'); //Don't save these notifications to the page.
        notification.textContent = message;
        notification.style.position = 'fixed';
        notification.style.top = '10px';
        notification.style.right = '10px';
        notification.style.padding = '10px';
        notification.style.borderRadius = '5px';
        notification.style.zIndex = '1000';
        notification.style.opacity = '0';
        notification.style.transition = 'opacity 0.3s ease-in-out';

        if (type === 'success') {
            notification.style.background = '#4CAF50';
            notification.style.color = 'white';
        } else if (type === 'error') {
            notification.style.background = '#F44336';
            notification.style.color = 'white';
        }

        document.body.appendChild(notification);

        // Fade in
        setTimeout(() => {
            notification.style.opacity = '1';
        }, 10);

        // Remove the notification after 3 seconds
        setTimeout(() => {
            notification.style.opacity = '0';
            setTimeout(() => {
                document.body.removeChild(notification);
            }, 300);
        }, 3000);
    }
});
</script>